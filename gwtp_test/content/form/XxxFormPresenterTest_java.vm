/*
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by Telosys ( http://www.telosys.org/ ) version $generator.version
 */
## Package declaration
package ${target.javaPackageFromFolder(${TEST_SRC})};
## Determine if linked object are present at least one for adjust import
#set( $attleastOne = false)
#foreach( $field in ${entity.attributes} )
#if($field.isFK())
#set( $attleastOne = true)
#end
#end

import static com.gwtplatform.dispatch.rest.delegates.test.DelegateTestUtils.givenDelegate;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.verify;

import javax.inject.Inject;

import org.jukito.JukitoRunner;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;

#set( $lowerCaseEntityName = $fn.toLowerCase($entity.name))

import com.gwtplatform.dispatch.rest.delegates.client.ResourceDelegate;
import com.gwtplatform.mvp.client.proxy.PlaceManager;
import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
import ${ROOT_PKG}.client.application.content.${lowerCaseEntityName}.form.${entity.name}FormPresenter;
import ${ROOT_PKG}.client.application.content.${lowerCaseEntityName}.form.${entity.name}FormPresenter.${entity.name}FormView;
import ${ROOT_PKG}.client.place.NameTokens;
import ${ROOT_PKG}.client.place.TokenParameters;
import ${ROOT_PKG}.shared.api.resources.${entity.name}Resource;
## For each Value list (selected links), make needed import
#foreach( $field in ${entity.attributes} )
#if($field.isFK())
import ${ROOT_PKG}.shared.api.resources.${field.referencedEntityName}Resource;
#end
#end
import ${ROOT_PKG}.shared.dto.${entity.name}Dto;
import ${ROOT_PKG}.test.util.BasePresenterTest;

@RunWith(JukitoRunner.class)
public class ${entity.name}FormPresenterTest extends BasePresenterTest {

	@Inject
	${entity.name}FormPresenter ${lowerCaseEntityName}FormPresenter;

	@Inject
	ResourceDelegate<${entity.name}Resource> ${lowerCaseEntityName}Service;

#foreach( $field in ${entity.attributes} )
#if($field.isFK())
#set( $uncapitalizedReferencedEntity = $fn.uncapitalize(${field.referencedEntityName}))
	@Inject
	ResourceDelegate<${field.referencedEntityName}Resource> ${uncapitalizedReferencedEntity}Service;
#end
#end

	@Inject
	${entity.name}FormView myView;

	@Test
	public void onRevealCreationMode(PlaceManager placeManager) {
## Upper case entity name used in NameTokens resolution (ui routing)
#set( $upperCaseEntityName = $fn.toUpperCase($entity.name))
#set( $formRootName = "${upperCaseEntityName}_FORM" )
#set($restCallparams="NameTokens.${formRootName})") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set( $uncapitalizedFieldName = $fn.uncapitalize($field.name))
#set($restCallparams="${restCallparams}.with(TokenParameters.${upperCaseFkName},TokenParameters.DEFAULT_ID)") 
#end
#end
		// Given
		PlaceRequest requestCreation = new PlaceRequest.Builder().nameToken(${restCallparams}.build();
		given(placeManager.getCurrentPlaceRequest()).willReturn(requestCreation);
#foreach( $field in ${entity.attributes} )
#if($field.isFK())
#set( $uncapitalizedReferencedEntity = $fn.uncapitalize(${field.referencedEntityName}))
		givenDelegate(${uncapitalizedReferencedEntity}Service).useResource(${field.referencedEntityName}Resource.class).and().succeed().withResult(getListItem()).when().listItems();
#end
#end

		${lowerCaseEntityName}FormPresenter.onReveal();
		// when
		verify(myView, Mockito.atLeastOnce()).load(Mockito.any(${entity.name}Dto.class));
	}

	@Test
	public void onRevealUpdateMode(PlaceManager placeManager) {
		// Given
		${entity.name}Dto ${lowerCaseEntityName} = new ${entity.name}Dto();
#foreach( $field in ${entity.attributes} )
#if($field.isKeyElement())
#set( $fieldCapitalized = $fn.capitalize($field.name))
#set($restrictedType="") 
#if(${field.fullType} == 'java.lang.Short' || ${field.fullType} == 'java.lang.Long')
#set($restrictedType= "java.lang.Integer") 
#elseif(${field.fullType} == 'java.lang.Float' || ${field.fullType} == 'java.math.BigDecimal')
#set($restrictedType= "java.lang.Double") 
#else
#set($restrictedType= ${field.fullType}) 
#end
		${lowerCaseEntityName}.set${fieldCapitalized}(${restrictedType}.valueOf("1"));
#end
#end
## Upper case entity name used in NameTokens resolution (ui routing)
#set( $upperCaseEntityName = $fn.toUpperCase($entity.name))
#set( $formRootName = "${upperCaseEntityName}_FORM" )
#set($restCallparams="NameTokens.${formRootName})") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set( $capitalizedFieldName = $fn.capitalize($field.name))
#set($restCallparams="${restCallparams}.with(TokenParameters.${upperCaseFkName},String.valueOf(${lowerCaseEntityName}.get${capitalizedFieldName}()))") 
#end
#end

#set($getCallparams="") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set( $capitalizedFieldName = $fn.capitalize($field.name))
## resolve restricted type
#set($restrictedType="") 
#if(${field.fullType} == 'java.lang.Short' || ${field.fullType} == 'java.lang.Long')
#set($restrictedType= "java.lang.Integer") 
#elseif(${field.fullType} == 'java.lang.Float' || ${field.fullType} == 'java.math.BigDecimal')
#set($restrictedType= "java.lang.Double") 
#else
#set($restrictedType= ${field.fullType}) 
#end
#if($field.isStringType())
#set($getCallparams="${getCallparams}${lowerCaseEntityName}.get${capitalizedFieldName}()") 
#else
#set($getCallparams="${getCallparams} ${restrictedType}.valueOf(${lowerCaseEntityName}.get${capitalizedFieldName}())")
#end
#if($foreach.index != ${entity.keyAttributesCount}- 1)
#set($getCallparams="${getCallparams}, ") 
#end
#end
#end
		// Given
		PlaceRequest requestCreation = new PlaceRequest.Builder().nameToken(${restCallparams}.build();
		given(placeManager.getCurrentPlaceRequest()).willReturn(requestCreation);
		givenDelegate(${lowerCaseEntityName}Service).useResource(${entity.name}Resource.class).and().succeed().withResult(${lowerCaseEntityName}).when().get(${getCallparams});
#foreach( $field in ${entity.attributes} )
#if($field.isFK())
#set( $uncapitalizedReferencedEntity = $fn.uncapitalize(${field.referencedEntityName}))
		givenDelegate(${uncapitalizedReferencedEntity}Service).useResource(${field.referencedEntityName}Resource.class).and().succeed().withResult(getListItem()).when().listItems();
#end
#end

		${lowerCaseEntityName}FormPresenter.onReveal();
		// when
		verify(myView, Mockito.atLeastOnce()).load(${lowerCaseEntityName});
	}

	@Test
	public void onSaveCreationMode(PlaceManager placeManager) {
#set( $upperCaseEntityName = $fn.toUpperCase($entity.name))
#set( $listRootName = "${upperCaseEntityName}_LIST" )
		// Given
		PlaceRequest placeRequest = new PlaceRequest.Builder().nameToken(NameTokens.${listRootName}).build();
		${entity.name}Dto ${lowerCaseEntityName} = new ${entity.name}Dto();
#foreach( $field in ${entity.attributes} )
#if($field.isNotNull() || $field.isNotEmpty() || $field.isNotBlank())
#set( $fieldCapitalized = $fn.capitalize($field.name))
#set($restrictedType="") 
#if(${field.fullType} == 'java.lang.Short' || ${field.fullType} == 'java.lang.Long')
#set($restrictedType= "java.lang.Integer") 
#elseif(${field.fullType} == 'java.lang.Float' || ${field.fullType} == 'java.math.BigDecimal')
#set($restrictedType= "java.lang.Double") 
#else
#set($restrictedType= ${field.fullType}) 
#end
#if(${restrictedType} == 'java.util.Date')
		${lowerCaseEntityName}.set${fieldCapitalized}(new java.util.Date());
#else
		${lowerCaseEntityName}.set${fieldCapitalized}(${restrictedType}.valueOf("1"));
#end
#end
#end
		givenDelegate(${lowerCaseEntityName}Service).useResource(${entity.name}Resource.class).and().succeed().withResult((Void) null).when().create(${lowerCaseEntityName});
		// When
		${lowerCaseEntityName}FormPresenter.save(${lowerCaseEntityName});
		// Then
		verify(placeManager).revealPlace(eq(placeRequest));
	}

	@Test
	public void onSaveUpdateMode(PlaceManager placeManager) {
#set( $upperCaseEntityName = $fn.toUpperCase($entity.name))
#set( $listRootName = "${upperCaseEntityName}_LIST" )
		// Given
		PlaceRequest placeRequest = new PlaceRequest.Builder().nameToken(NameTokens.${listRootName}).build();
		${entity.name}Dto ${lowerCaseEntityName} = new ${entity.name}Dto();
#foreach( $field in ${entity.attributes} )
#if($field.isNotNull() || $field.isNotEmpty() || $field.isNotBlank())
#set( $fieldCapitalized = $fn.capitalize($field.name))
#set($restrictedType="") 
#if(${field.fullType} == 'java.lang.Short' || ${field.fullType} == 'java.lang.Long')
#set($restrictedType= "java.lang.Integer") 
#elseif(${field.fullType} == 'java.lang.Float' || ${field.fullType} == 'java.math.BigDecimal')
#set($restrictedType= "java.lang.Double") 
#else
#set($restrictedType= ${field.fullType}) 
#end
#if(${restrictedType} == 'java.util.Date')
		${lowerCaseEntityName}.set${fieldCapitalized}(new java.util.Date());
#else
		${lowerCaseEntityName}.set${fieldCapitalized}(${restrictedType}.valueOf("1"));
#end
#end
#end
		givenDelegate(${lowerCaseEntityName}Service).useResource(${entity.name}Resource.class).and().succeed().withResult((Void) null).when().update(${lowerCaseEntityName},${getCallparams});
		// When
		${lowerCaseEntityName}FormPresenter.setUpdateMode(true);
		${lowerCaseEntityName}FormPresenter.save(${lowerCaseEntityName});
		// Then
		verify(placeManager).revealPlace(eq(placeRequest));
	}

}