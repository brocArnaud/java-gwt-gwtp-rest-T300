/*
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by Telosys ( http://www.telosys.org/ ) version $generator.version
 */
## Package declaration
package ${target.javaPackageFromFolder(${TEST_SRC})};

import static com.gwtplatform.dispatch.rest.delegates.test.DelegateTestUtils.givenDelegate;
import static org.mockito.BDDMockito.given;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import java.util.ArrayList;
import java.util.List;

import javax.inject.Inject;

import org.jukito.JukitoRunner;
import org.junit.Test;
import org.junit.runner.RunWith;

#set( $lowerCaseEntityName = $fn.toLowerCase($entity.name))

import com.gwtplatform.dispatch.rest.delegates.client.ResourceDelegate;
import com.gwtplatform.mvp.client.proxy.PlaceManager;
import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
import ${ROOT_PKG}.client.application.content.${lowerCaseEntityName}.list.${entity.name}ListPresenter;
import ${ROOT_PKG}.client.application.content.${lowerCaseEntityName}.list.${entity.name}ListPresenter.${entity.name}ListView;
import ${ROOT_PKG}.client.place.NameTokens;
import ${ROOT_PKG}.client.place.TokenParameters;
import ${ROOT_PKG}.shared.api.resources.${entity.name}Resource;
import ${ROOT_PKG}.shared.dto.${entity.name}Dto;
import ${ROOT_PKG}.test.util.BasePresenterTest;

@RunWith(JukitoRunner.class)
public class ${entity.name}ListPresenterTest extends BasePresenterTest {

	@Inject
	${entity.name}ListPresenter ${lowerCaseEntityName}ListPresenter;

	@Inject
	ResourceDelegate<${entity.name}Resource> ${lowerCaseEntityName}Service;

	@Inject
	${entity.name}ListView myView;

	@Test
	public void onReveal() {
		// Given
		${entity.name}Dto ${lowerCaseEntityName} = mock(${entity.name}Dto.class);
		${entity.name}Dto ${lowerCaseEntityName}2 = mock(${entity.name}Dto.class);
		final List<${entity.name}Dto> ${lowerCaseEntityName}s = new ArrayList<>();
		${lowerCaseEntityName}s.add(${lowerCaseEntityName});
		${lowerCaseEntityName}s.add(${lowerCaseEntityName}2);
		givenDelegate(${lowerCaseEntityName}Service).useResource(${entity.name}Resource.class).and().succeed().withResult(${lowerCaseEntityName}s).when().findAll();

		${lowerCaseEntityName}ListPresenter.onReveal();
		// when
		verify(myView).display(${lowerCaseEntityName}s);
	}

	@Test
	public void onDeleteClick() {
		final ${entity.name}Dto ${lowerCaseEntityName} = new ${entity.name}Dto();
#foreach( $field in ${entity.attributes} )
#if($field.isKeyElement())
#set( $fieldCapitalized = $fn.capitalize($field.name))
#set($restrictedType="") 
#if(${field.fullType} == 'java.lang.Short' || ${field.type} == 'java.lang.Long')
#set($restrictedType= "java.lang.Integer") 
#elseif(${field.type} == 'java.lang.Float' || ${field.type} == 'java.math.BigDecimal')
#set($restrictedType= "java.lang.Double") 
#else
#set($restrictedType= ${field.fullType}) 
#end
		${lowerCaseEntityName}.set${fieldCapitalized}(${restrictedType}.valueOf("1"));
#end
#end

#set($restCallparams="") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set( $capitalizedFieldName = $fn.capitalize($field.name))
#set($restCallparams="${restCallparams}${lowerCaseEntityName}.get${capitalizedFieldName}()") 
#if($foreach.index != ${entity.keyAttributesCount}- 1)
#set($restCallparams="${restCallparams}, ") 
#end
#end
#end
		givenDelegate(${lowerCaseEntityName}Service).useResource(${entity.name}Resource.class).and().succeed().withResult((Void) null).when().delete(${restCallparams});
		${lowerCaseEntityName}ListPresenter.onDeleteClick(${lowerCaseEntityName});
	}

	@Test
	public void onCreateClick(PlaceManager placeManager) {
## Upper case entity name used in NameTokens resolution (ui routing)
#set( $upperCaseEntityName = $fn.toUpperCase($entity.name))
#set( $formRootName = "${upperCaseEntityName}_FORM" )
#set($restCallparams="NameTokens.${formRootName})") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set( $uncapitalizedFieldName = $fn.uncapitalize($field.name))
#set($restCallparams="${restCallparams}.with(TokenParameters.${upperCaseFkName},TokenParameters.DEFAULT_ID)") 
#end
#end
		// Given
		PlaceRequest place = new PlaceRequest.Builder().nameToken(${restCallparams}.build();
		// When
		${lowerCaseEntityName}ListPresenter.onCreateClick();
		// Then
		verify(placeManager).revealPlace(eq(place));
	}

	@Test
	public void onUpdateClick(PlaceManager placeManager) {
		// Given
		${entity.name}Dto ${lowerCaseEntityName} = mock(${entity.name}Dto.class);
## Upper case entity name used in NameTokens resolution (ui routing)
#set( $upperCaseEntityName = $fn.toUpperCase($entity.name))
#set( $formRootName = "${upperCaseEntityName}_FORM" )
#set($restCallparams="NameTokens.${formRootName})") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set( $capitalizedFieldName = $fn.capitalize($field.name))
#set($restCallparams="${restCallparams}.with(TokenParameters.${upperCaseFkName},String.valueOf(${lowerCaseEntityName}.get${capitalizedFieldName}()))") 
#set($restrictedType="") 
#if(${field.fullType} == 'java.lang.Short' || ${field.type} == 'java.lang.Long')
#set($restrictedType= "java.lang.Integer") 
#elseif(${field.type} == 'java.lang.Float' || ${field.type} == 'java.math.BigDecimal')
#set($restrictedType= "java.lang.Double") 
#else
#set($restrictedType= ${field.fullType}) 
#end
		given(${lowerCaseEntityName}.get${capitalizedFieldName}()).willReturn(${restrictedType}.valueOf("1"));
#end
#end
		PlaceRequest place = new PlaceRequest.Builder().nameToken(${restCallparams}.build();
		// When
		${lowerCaseEntityName}ListPresenter.onUpdateClick(${lowerCaseEntityName});
		// Then
		verify(placeManager).revealPlace(eq(place));
	}

}