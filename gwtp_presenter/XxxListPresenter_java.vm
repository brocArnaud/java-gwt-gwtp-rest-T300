/*
 * Created on $today.date ( Date ISO $today.date("yyyy-MM-dd") - Time $today.time )
 * Generated by Telosys ( http://www.telosys.org/ ) version $generator.version
 */
## Lower case entity name used in import declaration
#set( $lowerCaseEntityName = $fn.toLowerCase($entity.name))
## Upper case entity name used in NameTokens resolution (ui routing)
#set( $upperCaseEntityName = $fn.toUpperCase($entity.name))
#set( $formRootName = "${upperCaseEntityName}_FORM" )
#set( $listRootName = "${upperCaseEntityName}_LIST" )
## Package declaration
package ${target.javaPackageFromFolder(${SRC})};

import java.util.List;

import com.google.inject.Inject;
import com.google.web.bindery.event.shared.EventBus;
import com.gwtplatform.mvp.client.annotations.NameToken;
import com.gwtplatform.mvp.client.annotations.ProxyStandard;
import com.gwtplatform.mvp.client.proxy.PlaceManager;
import com.gwtplatform.mvp.client.proxy.ProxyPlace;
import ${ROOT_PKG}.client.application.ApplicationPresenter;
import ${ROOT_PKG}.client.application.content.${lowerCaseEntityName}.list.${entity.name}ListPresenter.${entity.name}ListProxy;
import ${ROOT_PKG}.client.application.content.${lowerCaseEntityName}.list.${entity.name}ListPresenter.${entity.name}ListView;
import ${ROOT_PKG}.client.event.LoadingEvent;
import ${ROOT_PKG}.client.place.NameTokens;
import ${ROOT_PKG}.client.place.TokenParameters;
import ${ROOT_PKG}.client.util.common.list.presenter.AbstractListPresenter;
import ${ROOT_PKG}.client.util.common.list.view.ListView;
import ${ROOT_PKG}.shared.api.resources.${entity.name}Resource;
import ${ROOT_PKG}.shared.dto.${entity.name}Dto;

public class ${entity.name}ListPresenter extends AbstractListPresenter<${entity.name}ListProxy, ${entity.name}ListView, ${entity.name}Dto, ${entity.name}Resource> {
	// Define contract with the associated view
	public interface ${entity.name}ListView extends ListView<${entity.name}ListPresenter, ${entity.name}Dto> {
	}

	/**
	 * Proxy declaration, define an accessible place of the application.
	 * @see NameToken for more information about place definition
	 * @see ProxyPlace for more information about place definition
	 */
	@ProxyStandard
	@NameToken(NameTokens.${listRootName})
	public interface ${entity.name}ListProxy extends ProxyPlace<${entity.name}ListPresenter> {
	}

	@Inject
	${entity.name}ListPresenter(EventBus eventBus, ${entity.name}ListView view, ${entity.name}ListProxy proxy, PlaceManager placeManager) {
		super(eventBus, view, proxy, ApplicationPresenter.SLOT_MAIN, placeManager);
		getView().setPresenter(this);
	}

	@Override
	public String getFormRouteToken() {
		return NameTokens.${formRootName};
	}
	
	@Override
	public void onCreateClick() {
#set($createClickReveal="") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set($createClickReveal="${createClickReveal}TokenParameters.${upperCaseFkName}, TokenParameters.DEFAULT_ID") 
#if($foreach.index != ${entity.keyAttributesCount}- 1)
#set($createClickReveal="${createClickReveal}, ") 
#end
#end
#end
		revealPlace(getFormRouteToken(), ${createClickReveal});
	}

	@Override
	public void load() {
		LoadingEvent.fire(this, true);
		service.withCallback(new CallBack<List<${entity.name}Dto>>() {
			@Override
			public void onSuccess(List<${entity.name}Dto> datas) {
				getView().display(datas);
				LoadingEvent.fire(${entity.name}ListPresenter.this, false);
			}
		}).findAll();
	}

	@Override
	public void onDeleteClick(${entity.name}Dto data) {
#set($restCallparams="") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#set( $capitalizedFieldName = $fn.capitalize($field.name))
#set($restCallparams="${restCallparams}data.get${capitalizedFieldName}()") 
#if($foreach.index != ${entity.keyAttributesCount}- 1)
#set($restCallparams="${restCallparams}, ") 
#end
#end
#end
		LoadingEvent.fire(this, true);
		service.withCallback(new CallBack<Void>() {
			@Override
			public void onSuccess(Void nothing) {
				load();
			}
		}).delete(${restCallparams});
	}

	@Override
	public void onUpdateClick(${entity.name}Dto data) {
#set($updateClickReveal="") 
#foreach( $field in ${entity.keyAttributes} )
#if( $field.isKeyElement())
#set( $capitalizedFieldName = $fn.capitalize($field.name))
#set( $upperCaseFkName = $fn.toUpperCase($field.name))
#if($field.isStringType())
#set($updateClickReveal="${updateClickReveal}TokenParameters.${upperCaseFkName}, data.get${capitalizedFieldName}()") 
#else
#set($updateClickReveal="${updateClickReveal}TokenParameters.${upperCaseFkName}, java.lang.String.valueOf(data.get${capitalizedFieldName}())") 
#end
#if($foreach.index != ${entity.keyAttributesCount}- 1)
#set($updateClickReveal="${updateClickReveal}, ") 
#end
#end
#end
		revealPlace(getFormRouteToken(), ${updateClickReveal});
	}
}